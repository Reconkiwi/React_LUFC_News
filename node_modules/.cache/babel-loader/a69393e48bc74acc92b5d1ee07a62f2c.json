{"ast":null,"code":"var _jsxFileName = \"/Users/bengoodwin/Desktop/Client - Web/reactlufcnews/src/Home/Components/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../Styles/App.scss\";\nimport { Grid, GridRow, GridColumn, Image, Segment } from \"semantic-ui-react\";\nexport default function DataLoader() {\n  // useState() is a hook used to store local state data\n  // here we set 'date' which is our constant and 'setData' which we are using to define 'data'\n  const [data, setData] = useState([]); // useEffect() is a function that handles actions when something affects your component\n  // So we want to fetch our API when certain things affect our component\n\n  useEffect(() => {\n    // Here we define the function getData which fetches our API data\n    function getData() {\n      // Select API endpoint\n      fetch(\"http://www.lufcnews.co.uk/wp-json/wp/v2/posts?_embed\") // Turn the data into something we can use I.E. JSON\n      .then(response => response.json()) // Set the data in the state\n      .then(data => setData(data)); // See the data in the console\n\n      console.log(data);\n    }\n\n    ; // Call the function\n\n    getData(); // So here we need to set a dependency. The dependency is used to call useEffect. If we didn't\n    // do this then the useEffect would be called every time something is affected in our app.\n    // E.G. a button being clicked or a function being called. Here we have put data as our\n    // dependency which means that the function will be called every time the data is changed.\n    // This creates a fetching loop because when we call the function the data is re-fetched\n    // causing the useEffect to be called again. This isn't really a good practice as we are fetching\n    // and re-rendering constantly.\n  }, [data]); // We create a constant called posts which grabs the data, spreads the array and creates a JSX\n  // element for each item.\n\n  const posts = data.map(d => React.createElement(GridColumn, {\n    width: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Image, {\n    width: 700,\n    src: d._embedded['wp:featuredmedia']['0'].source_url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, d.title.rendered))); // This is our return function where we render everything\n\n  return React.createElement(Segment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    columns: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(GridRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, posts)));\n}","map":{"version":3,"sources":["/Users/bengoodwin/Desktop/Client - Web/reactlufcnews/src/Home/Components/App.js"],"names":["React","useState","useEffect","Grid","GridRow","GridColumn","Image","Segment","DataLoader","data","setData","getData","fetch","then","response","json","console","log","posts","map","d","_embedded","source_url","title","rendered"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,oBAAP;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,UAAxB,EAAoCC,KAApC,EAA2CC,OAA3C,QAA0D,mBAA1D;AAEA,eAAe,SAASC,UAAT,GAAsB;AACnC;AACA;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC,CAHmC,CAMnC;AACA;;AACAC,EAAAA,SAAS,CAAE,MAAM;AACjB;AACG,aAASS,OAAT,GAAoB;AACnB;AACAC,MAAAA,KAAK,CAAC,sDAAD,CAAL,CACA;AADA,OAECC,IAFD,CAEMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFlB,EAGA;AAHA,OAICF,IAJD,CAIMJ,IAAI,IAAIC,OAAO,CAACD,IAAD,CAJrB,EAFmB,CAOnB;;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACD;;AAAA,KAXc,CAYf;;AACAE,IAAAA,OAAO,GAbQ,CAcf;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GArBQ,EAqBN,CAACF,IAAD,CArBM,CAAT,CARmC,CA+BnC;AACA;;AACA,QAAMS,KAAK,GACTT,IAAI,CAACU,GAAL,CAASC,CAAC,IACN,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE,GAAd;AAAmB,IAAA,GAAG,EAAEA,CAAC,CAACC,SAAF,CAAY,kBAAZ,EAAgC,GAAhC,EAAqCC,UAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,CAAC,CAACG,KAAF,CAAQC,QAAZ,CAFF,CADJ,CADF,CAjCmC,CA0CnC;;AACE,SACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,OAAO,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMN,KADN,CADA,CADF,CADF;AASH","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../Styles/App.scss\";\nimport { Grid, GridRow, GridColumn, Image, Segment } from \"semantic-ui-react\";\n\nexport default function DataLoader() {\n  // useState() is a hook used to store local state data\n  // here we set 'date' which is our constant and 'setData' which we are using to define 'data'\n  const [data, setData] = useState([]);\n\n\n  // useEffect() is a function that handles actions when something affects your component\n  // So we want to fetch our API when certain things affect our component\n  useEffect( () => {\n  // Here we define the function getData which fetches our API data\n     function getData () {\n      // Select API endpoint\n      fetch(\"http://www.lufcnews.co.uk/wp-json/wp/v2/posts?_embed\")\n      // Turn the data into something we can use I.E. JSON\n      .then(response => response.json())\n      // Set the data in the state\n      .then(data => setData(data));\n      // See the data in the console\n      console.log(data);\n    };\n    // Call the function\n    getData();\n    // So here we need to set a dependency. The dependency is used to call useEffect. If we didn't\n    // do this then the useEffect would be called every time something is affected in our app.\n    // E.G. a button being clicked or a function being called. Here we have put data as our\n    // dependency which means that the function will be called every time the data is changed.\n    // This creates a fetching loop because when we call the function the data is re-fetched\n    // causing the useEffect to be called again. This isn't really a good practice as we are fetching\n    // and re-rendering constantly.\n  }, [data]);\n  \n  // We create a constant called posts which grabs the data, spreads the array and creates a JSX\n  // element for each item.\n  const posts = (\n    data.map(d => (\n        <GridColumn width={4}>\n          <Image width={700} src={d._embedded['wp:featuredmedia']['0'].source_url}/>\n          <a>{d.title.rendered}</a>\n        </GridColumn>\n    ))\n  );\n\n  // This is our return function where we render everything\n    return (\n      <Segment>\n        <Grid columns={4}>\n        <GridRow>\n            { posts }\n        </GridRow>\n      </Grid>\n      </Segment>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}